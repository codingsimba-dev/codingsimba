

model Subscription {
  id String @id @default(ulid())

  // =============================================================================
  // PAYMENT PROVIDER INTEGRATION
  // =============================================================================

  /// The unique identifier for the subscription from the payment provider (e.g., Stripe, Polar)
  subscriptionId String             @unique
  /// The current status of the subscription (synced from payment provider)
  status         SubscriptionStatus @default(active)

  // =============================================================================
  // SUBSCRIPTION CONFIGURATION
  // =============================================================================

  /// The type of the subscription (individual vs team)
  type SubscriptionType @default(individual)
  /// The plan tier determining access level and features
  plan Plan             @default(basic)

  // =============================================================================
  // BILLING PERIOD TRACKING
  // =============================================================================

  /// The timestamp when the current subscription period starts
  currentPeriodStart DateTime?
  /// The timestamp when the current subscription period ends
  currentPeriodEnd   DateTime?

  // =============================================================================
  // ACCESS CONTROL
  // =============================================================================

  /// A list of all enrollments granted by this subscription
  enrollments Enrollment[]

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // SUBSCRIPTION OWNERSHIP (MUTUALLY EXCLUSIVE)
  // =============================================================================

  /// The user account associated with this subscription. Null if it's a team subscription.
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique

  /// The team account associated with this subscription. Null if it's an individual subscription.
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String? @unique

  // Performance indexes
  @@index([userId])
  @@index([teamId])
  @@index([currentPeriodEnd])
  @@index([status])
  @@index([subscriptionId])
}

enum SubscriptionStatus {
  /// Subscription is active and in good standing
  active
  /// Subscription is in trial period
  trialing
  /// Subscription has been canceled (may still be active until period end)
  canceled
  /// Payment failed and subscription is suspended
  unpaid
  /// Payment is overdue but subscription may still be active
  past_due
  /// Subscription setup is incomplete
  incomplete
  /// Subscription setup failed and expired
  incomplete_expired
}

enum SubscriptionType {
  /// Individual user subscription
  individual
  /// Team/organization subscription with shared access
  team
}

enum Plan {
  // =============================================================================
  // INDIVIDUAL USER PLANS
  // =============================================================================

  /// Free tier with limited content access
  basic
  /// Individual paid plan with full content access
  premium
  /// Advanced individual plan with additional features
  pro

  // =============================================================================
  // TEAM PLANS
  // =============================================================================

  /// Small team plan (up to 10 members)
  team_starter
  /// Medium team plan (up to 50 members)
  team_pro
  /// Large team plan (unlimited members + enterprise features)
  team_enterprise
}


model Enrollment {
  id String @id @default(ulid())

  // =============================================================================
  // SUBSCRIPTION LINKAGE
  // =============================================================================

  /// The subscription that grants this enrollment (can be individual or team)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId String?

  // =============================================================================
  // ENROLLMENT TRACKING
  // =============================================================================

  /// When the user was first enrolled (for analytics and billing)
  enrolledAt DateTime @default(now())

  // =============================================================================
  // ENROLLMENT RELATIONS
  // =============================================================================

  /// The user who is enrolled. This is always required.
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  /// The team through which the user is enrolled (if applicable)
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?

  // =============================================================================
  // CONTENT ACCESS (MUTUALLY EXCLUSIVE)
  // =============================================================================

  /// The program this enrollment grants access to (either program OR course)
  programId String?
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// The course this enrollment grants access to (either program OR course)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Unique constraints: one enrollment per user per content
  @@unique([userId, courseId])
  @@unique([userId, programId])
  // Performance indexes
  @@index([subscriptionId])
  @@index([teamId])
  @@index([userId])
  @@index([enrolledAt])
  @@index([courseId])
  @@index([programId])
}
