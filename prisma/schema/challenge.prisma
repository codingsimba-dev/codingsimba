

model MonthlyChallenge {
  id       String  @id @default(ulid())
  /// The title of the monthly challenge set (e.g., "June 2024 Code Challenge").
  title    String
  /// The month of the challenge (1-12).
  month    Int
  /// The year of the challenge.
  year     Int
  /// An optional theme for the month's challenges.
  theme    String?
  /// Whether this set of challenges is currently active and accepting submissions.
  isActive Boolean @default(false)

  challenges Challenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([month, year])
}


model Challenge {
  id          String              @id @default(ulid())
  /// The title of the challenge.
  title       String
  /// A unique, URL-friendly identifier for the challenge.
  slug        String              @unique
  /// A detailed description of the challenge, in Markdown format.
  description String
  /// The difficulty level of the challenge.
  difficulty  ChallengeDifficulty @default(MEDIUM)
  /// The number of points awarded for successfully completing the challenge.
  points      Int                 @default(100)
  /// A JSON object containing boilerplate code for different languages.
  template    Json?
  /// A JSON array of hints to help the user.
  hints       Json?
  /// A detailed explanation of the optimal solution.
  solution    String?

  monthlyChallengeId String
  monthlyChallenge   MonthlyChallenge @relation(fields: [monthlyChallengeId], references: [id], onDelete: Cascade)

  submissions    ChallengeSubmission[]
  testCases      ChallengeTestCase[]
  userChallenges UserChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([monthlyChallengeId])
}

enum ChallengeDifficulty {
  /// Beginner-friendly challenges focusing on basic concepts
  EASY
  /// Intermediate challenges requiring algorithmic thinking
  MEDIUM
  /// Advanced challenges with complex algorithms and optimizations
  HARD
}


model ChallengeTestCase {
  id             String  @id @default(ulid())
  /// The input data for the test case.
  input          String
  /// The expected output for the given input.
  expectedOutput String
  /// Whether this test case is hidden from the user during testing.
  isHidden       Boolean @default(false)
  /// Whether this is an example test case shown in the challenge description.
  isExample      Boolean @default(false)

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([challengeId])
}


model ChallengeSubmission {
  id            String           @id @default(ulid())
  /// The code submitted by the user.
  code          String
  /// The programming language of the submitted code.
  language      String
  /// The result of the submission (e.g., PENDING, ACCEPTED, WRONG_ANSWER).
  status        SubmissionStatus @default(PENDING)
  /// The score awarded for this submission.
  score         Int              @default(0)
  /// The execution time of the submission in milliseconds.
  executionTime Int?
  /// The memory used by the submission in kilobytes.
  memoryUsage   Int?
  /// A JSON object containing detailed results, such as stdout, stderr, and test case outcomes.
  result        Json?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  submittedAt        DateTime            @default(now())
  userChallengeBadge UserChallengeBadge?

  @@index([userId])
  @@index([challengeId])
  @@index([status])
}

enum SubmissionStatus {
  /// Submission received, queued for processing
  PENDING
  /// Code is currently being executed
  RUNNING
  /// All tests passed successfully - optimal outcome
  ACCEPTED
  /// Code executed but produced incorrect output
  WRONG_ANSWER
  /// Code execution exceeded allowed time limit
  TIME_LIMIT_EXCEEDED
  /// Code execution used more memory than allowed
  MEMORY_LIMIT_EXCEEDED
  /// Code crashed or threw an exception during execution
  RUNTIME_ERROR
  /// Code failed to compile or has syntax errors
  COMPILE_ERROR
}


model UserChallenge {
  id               String              @id @default(ulid())
  /// The user's current status for this challenge (e.g., NOT_STARTED, IN_PROGRESS).
  status           UserChallengeStatus @default(NOT_STARTED)
  /// The timestamp when the user first started the challenge.
  startedAt        DateTime?
  /// The timestamp when the user successfully completed the challenge.
  completedAt      DateTime?
  /// The user's last saved code for this challenge.
  currentCode      String?
  /// The user's last selected language for this challenge.
  currentLanguage  String?
  /// The timestamp when the user viewed the solution.
  viewedSolutionAt DateTime?

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
}

enum UserChallengeStatus {
  /// Challenge has not been attempted yet
  NOT_STARTED
  /// User has started working on the challenge
  IN_PROGRESS
  /// Challenge has been successfully completed
  COMPLETED
}


model Badge {
  id          String @id @default(ulid())
  /// The name of the badge.
  name        String @unique
  /// A description of the badge and how to earn it.
  description String
  /// The badge's image.
  image       Image?
  /// A JSON object defining the criteria for earning the badge (e.g., points, challenges completed).
  criteria    Json

  users UserChallengeBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChallengeBadge {
  id       String   @id @default(ulid())
  /// The timestamp when the badge was earned.
  earnedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  // Optionally link to the submission that earned the badge
  submissionId String?              @unique
  submission   ChallengeSubmission? @relation(fields: [submissionId], references: [id], onDelete: SetNull)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}


model Leaderboard {
  id       String           @id @default(ulid())
  /// The scope of the leaderboard (e.g., GLOBAL, MONTHLY).
  scope    LeaderboardScope @default(GLOBAL)
  /// The programming language for language-specific leaderboards.
  language String?
  /// The month for a monthly leaderboard.
  month    Int?
  /// The year for a monthly leaderboard.
  year     Int?

  entries LeaderboardEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([scope, language, month, year])
}

enum LeaderboardScope {
  /// All-time rankings across all users and challenges
  GLOBAL
  /// Time-limited monthly competition rankings
  MONTHLY
}

model LeaderboardEntry {
  id    String @id @default(ulid())
  /// The user's rank on the leaderboard.
  rank  Int
  /// The user's score on the leaderboard.
  score Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  leaderboardId String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leaderboardId, userId])
  @@index([leaderboardId])
  @@index([userId])
  @@index([score])
}
