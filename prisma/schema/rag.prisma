

model DocumentChunk {
  id         String    @id @default(ulid())
  /// The type of content in this chunk (text, image, etc.)
  chunkType  ChunkType @default(TEXT)
  /// The sequential position of this chunk within the document
  chunkIndex Int
  /// The vector embedding representation of the chunk content (now includes contextual content)
  embedding  Bytes
  /// Enhanced metadata about the chunk including contextual information
  /// Structure: {
  ///   length: number,
  ///   wordCount: number,
  ///   preview: string,
  ///   heading?: string,
  ///   previousChunk?: string,
  ///   nextChunk?: string,
  ///   documentType?: string,
  ///   hasCodeExample?: boolean,
  ///   contextualContent?: string
  /// }
  metadata   Json?
  /// The parent document this chunk belongs to
  document   Document  @relation(fields: [documentId], references: [id])
  documentId String
  /// The actual text or processed content of the chunk (original content)
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([documentId])
  @@index([documentId, chunkIndex])
  @@index([chunkType])
  @@map("document_chunks")
}

enum ChunkType {
  /// Plain text content with semantic embeddings
  TEXT
  /// Image content with visual embeddings and OCR text
  IMAGE
  /// Code snippets with syntax-aware processing
  CODE
  /// Table data with structured formatting
  TABLE
}


model Document {
  id        String          @id @default(ulid())
  /// The title or name of the document
  title     String
  /// The source URL, file path, or origin of the document
  source    String?
  /// The full text content of the document
  content   String
  /// Enhanced metadata for contextual retrieval
  /// Structure: {
  ///   documentType?: string (tutorial, blog, docs, etc.),
  ///   totalChunks?: number,
  ///   headingCount?: number,
  ///   hasCodeExamples?: boolean,
  ///   difficulty?: string,
  ///   tags?: string[],
  ///   author?: string,
  ///   category?: string,
  ///   language?: string
  /// }
  metadata  Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  /// All chunks created from this document
  chunks    DocumentChunk[]

  @@index([createdAt])
  @@map("documents")
}


model QueryLog {
  id               String   @id @default(ulid())
  /// The original user query
  originalQuery    String
  /// The enhanced/expanded query
  expandedQuery    String?
  /// Alternative query phrasings generated
  rewrittenQueries Json? // Array of strings
  /// Detected query intent (conceptual, procedural, debugging, example, general)
  intent           String?
  /// Number of chunks retrieved
  chunksRetrieved  Int      @default(0)
  /// Average similarity score of retrieved chunks
  avgSimilarity    Float?
  /// Final confidence score of the response
  confidence       Float?
  /// Whether contextual retrieval was used
  useContextual    Boolean  @default(false)
  /// Response time in milliseconds
  responseTime     Int?
  /// User feedback on response quality (if provided)
  userFeedback     String? // positive, negative, neutral
  createdAt        DateTime @default(now())

  @@index([intent])
  @@index([createdAt])
  @@index([confidence])
  @@map("query_logs")
}


model EmbeddingVersion {
  id           String   @id @default(ulid())
  /// Model name (e.g., "text-embedding-3-small")
  modelName    String
  /// Model version or identifier
  modelVersion String
  /// Embedding dimensions
  dimensions   Int
  /// API provider (openai, deepseek, etc.)
  provider     String
  /// Whether this is the currently active version
  isActive     Boolean  @default(false)
  /// Performance metrics
  /// Structure: {
  ///   avgProcessingTime?: number,
  ///   avgSimilarityScore?: number,
  ///   totalEmbeddings?: number,
  ///   errorRate?: number
  /// }
  metrics      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([modelName, modelVersion])
  @@index([isActive])
  @@map("embedding_versions")
}
