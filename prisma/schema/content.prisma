

model Content {
  id       String      @id @default(ulid())
  /// The unique identifier from the headless CMS (e.g., Sanity)
  sanityId String      @unique
  /// The type of content (determines display and behavior)
  type     ContentType
  /// The number of views this content has received (for analytics)
  views    Int         @default(0)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // ENGAGEMENT RELATIONS
  // =============================================================================

  /// User likes on this content
  likes     Like[]
  /// Comments and discussions on this content
  comments  Comment[]
  /// User bookmarks for later reference
  bookmarks Bookmark[]
  /// User-submitted reports and flags
  reports   ContentReport[]

  // Performance indexes
  @@unique([sanityId, type])
  @@index([type, views])
  @@index([createdAt, type])
  @@index([views])
}

enum ContentType {
  /// Blog articles and written content
  ARTICLE
  /// Step-by-step tutorials and guides
  TUTORIAL
}

enum ContentStatus {
  /// Content is not yet accessible to the user
  LOCKED
  /// User has started but not completed the content
  IN_PROGRESS
  /// User has successfully completed the content
  COMPLETED
}


model Program {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // PROGRESS TRACKING
  // =============================================================================

  /// The user's completion progress percentage (0-100)
  progress    Int           @default(0)
  /// When the user first gained access to this program
  unlockedAt  DateTime      @default(now())
  /// When the user completed the entire program
  completedAt DateTime?
  /// The user's current status in the program
  status      ContentStatus @default(LOCKED)

  // =============================================================================
  // PROGRAM RELATIONS
  // =============================================================================

  /// Courses that make up this program
  courses      Course[]
  /// User reviews and ratings for this program
  reviews      Review[]
  /// Enrollment records for access control
  enrollments  Enrollment[]
  certificates Certificate[]

  // User relation (each user has their own progress record)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Performance indexes
  @@index([userId])
  @@index([userId, status])
  @@index([status])
  @@index([completedAt])
}

model Course {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // PROGRESS TRACKING
  // =============================================================================

  /// The user's completion progress percentage (0-100)
  progress    Int           @default(0)
  /// When the user first gained access to this course
  unlockedAt  DateTime      @default(now())
  /// When the user completed the entire course
  completedAt DateTime?
  /// The user's current status in the course
  status      ContentStatus @default(LOCKED)

  // =============================================================================
  // COURSE RELATIONS
  // =============================================================================

  /// Modules that make up this course
  modules           Module[]
  /// User reviews and ratings for this course
  reviews           Review[]
  /// Enrollment records for access control
  enrollments       Enrollment[]
  certificates      Certificate[]
  /// Team learning paths that include this course
  teamLearningPaths TeamLearningPathCourse[]

  // User relation (each user has their own progress record)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Optional program relation (courses can be standalone or part of a program)
  program   Program? @relation(fields: [programId], references: [id])
  programId String?

  // Performance indexes
  @@index([userId])
  @@index([programId])
  @@index([userId, status])
  @@index([status])
  @@index([completedAt])
}

model Module {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // PROGRESS TRACKING
  // =============================================================================

  /// The user's completion progress percentage (0-100)
  progress    Int           @default(0)
  /// When the user first gained access to this module
  unlockedAt  DateTime      @default(now())
  /// When the user completed the entire module
  completedAt DateTime?
  /// The user's current status in the module
  status      ContentStatus @default(LOCKED)
  /// The type of module (content vs exercise)
  type        ModuleType    @default(CONTENT)

  // =============================================================================
  // MODULE RELATIONS
  // =============================================================================

  /// Sub-modules that make up this module
  subModules SubModule[]

  /// The test/assessment associated with this module (required)
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  // User relation (each user has their own progress record)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Parent course relation
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  // Performance indexes
  @@index([userId])
  @@index([courseId])
  @@index([userId, status])
  @@index([testId])
}

enum ModuleType {
  /// Standard content module with lessons and materials
  CONTENT
  /// Interactive exercise module with hands-on activities
  EXERCISE
}

model SubModule {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // PROGRESS TRACKING
  // =============================================================================

  /// The user's completion progress percentage (0-100)
  progress    Int           @default(0)
  /// When the user first gained access to this sub-module
  unlockedAt  DateTime      @default(now())
  /// When the user completed all lessons in this sub-module
  completedAt DateTime?
  /// The user's current status in the sub-module
  status      ContentStatus @default(LOCKED)

  // =============================================================================
  // SUB-MODULE RELATIONS
  // =============================================================================

  /// Individual lessons that make up this sub-module
  lessons Lesson[]

  // User relation (each user has their own progress record)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Parent module relation
  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  // Performance indexes
  @@index([userId])
  @@index([moduleId])
  @@index([userId, status])
}

model Lesson {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // PROGRESS TRACKING
  // =============================================================================

  /// When the user first gained access to this lesson
  unlockedAt  DateTime      @default(now())
  /// When the user completed this lesson
  completedAt DateTime?
  /// The user's current status for this lesson
  status      ContentStatus @default(LOCKED)

  // =============================================================================
  // LESSON RELATIONS
  // =============================================================================

  /// Time tracking records for this lesson
  timeSpent TimeSpent[]

  // User relation (each user has their own progress record)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Parent sub-module relation
  subModule   SubModule @relation(fields: [subModuleId], references: [id], onDelete: Cascade)
  subModuleId String

  // Performance indexes
  @@index([userId])
  @@index([subModuleId])
  @@index([userId, status])
  @@index([completedAt])
}


model Test {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String @unique

  // =============================================================================
  // TEST RELATIONS
  // =============================================================================

  /// The modules that use this test (one-to-many)
  modules   Module[]
  /// Questions that make up this test
  questions TestQuestion[]

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sanityId])
}

model TestQuestion {
  id       String           @id @default(ulid())
  /// The unique identifier from the headless CMS
  sanityId String           @unique
  /// The type of question (determines UI and validation)
  type     TestQuestionType @default(MULTIPLE_CHOICE)
  /// JSON array of options (for multiple choice, etc.)
  options  Json?
  /// JSON array or string for correct answer(s)
  answer   Json

  // Parent test relation
  testId String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([testId])
  @@index([type])
}

enum TestQuestionType {
  /// Multiple choice with single correct answer
  MULTIPLE_CHOICE
  /// True/false binary choice
  TRUE_FALSE
  /// Free-text short answer
  SHORT_ANSWER
}


model Like {
  id    String @id @default(ulid())
  /// The number of likes (typically 1, allows for future flexibility)
  count Int    @default(0)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Content relation (optional - either content OR comment)
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Comment relation (optional - either content OR comment)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  // Unique constraints to prevent duplicate likes
  @@unique([contentId, userId])
  @@unique([commentId, userId])
  @@index([userId])
  @@index([contentId])
  @@index([commentId])
}

model Bookmark {
  id    String  @id @default(ulid())
  /// Optional personal notes the user can add to their bookmark
  notes String?

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Content relation
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // =============================================================================
  // BOOKMARK ORGANIZATION
  // =============================================================================

  /// Many-to-many relationship with tags for organization
  bookmarkTags BookmarkTag[]

  // Unique constraint: one bookmark per user per content
  @@unique([contentId, userId])
  @@index([userId])
  @@index([contentId])
  @@index([createdAt])
}

model Tag {
  id          String  @id @default(ulid())
  /// The name of the tag (e.g., "react", "tutorial", "frontend")
  name        String
  /// Optional description of what the tag represents
  description String?
  /// The color of the tag for UI display (hex color code)
  color       String? @default("#3B82F6")
  /// Whether this tag is created by the system (true) or by users (false)
  isSystem    Boolean @default(false)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation (null for system tags)
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // =============================================================================
  // TAG RELATIONS
  // =============================================================================

  /// Many-to-many relationship with bookmarks
  bookmarkTags BookmarkTag[]

  // Unique constraint: tag names must be unique per user (or globally for system tags)
  @@unique([name, userId])
  @@index([userId])
  @@index([name])
  @@index([isSystem])
}

model BookmarkTag {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())

  // Bookmark relation
  bookmarkId String
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  // Tag relation
  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Unique constraint: one tag per bookmark
  @@unique([bookmarkId, tagId])
  @@index([bookmarkId])
  @@index([tagId])
}


model ContentReport {
  id         String     @id @default(ulid())
  /// The reason for flagging the content
  reason     FlagReason
  /// Additional details provided by the user
  details    String?
  /// The current status of the flag
  status     FlagStatus @default(PENDING)
  /// Admin notes for internal use and decision documentation
  adminNotes String?
  /// When the flag was resolved by a moderator
  resolvedAt DateTime?

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // REPORT RELATIONS
  // =============================================================================

  /// The user who submitted the flag
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// The admin who resolved the flag (optional)
  resolvedById String?
  resolvedBy   User?   @relation("ResolvedReports", fields: [resolvedById], references: [id], onDelete: SetNull)

  /// The content being flagged (articles, tutorials) - optional
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  /// The comment being flagged - optional
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Unique constraints: one report per user per content/comment
  @@unique([contentId, userId])
  @@unique([commentId, userId])
  @@index([userId])
  @@index([contentId])
  @@index([commentId])
  @@index([status])
  @@index([createdAt])
  @@index([resolvedById])
}

enum FlagReason {
  /// Unsolicited promotional content or repetitive posts
  SPAM
  /// Content violating community guidelines
  INAPPROPRIATE
  /// Personal attacks or bullying behavior
  HARASSMENT
  /// False or misleading information
  MISINFORMATION
  /// Copyright or intellectual property violations
  COPYRIGHT
  /// Violent or threatening content
  VIOLENCE
  /// Discriminatory or hateful speech
  HATE_SPEECH
  /// Adult or explicit content
  ADULT_CONTENT
  /// Fraudulent or deceptive content
  SCAM
  /// Other issues not covered by specific categories
  OTHER
}

enum FlagStatus {
  /// Newly submitted, awaiting moderator attention
  PENDING
  /// Being actively reviewed by a moderator
  UNDER_REVIEW
  /// Review completed, appropriate action taken
  RESOLVED
  /// Review completed, no action needed
  DISMISSED
}


model Comment {
  id   String @id @default(ulid())
  /// The body of the comment (supports rich text/markdown)
  body String

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // COMMENT THREADING
  // =============================================================================

  /// The ID of the parent comment, for creating threaded replies
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  // =============================================================================
  // COMMENT RELATIONS
  // =============================================================================

  /// Likes received on this comment
  likes   Like[]
  /// Reports submitted for this comment
  reports ContentReport[]

  /// The author of the comment (nullable for anonymous/deleted users)
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  /// The content this comment belongs to
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Performance indexes
  @@index([authorId])
  @@index([contentId])
  @@index([parentId])
  @@index([createdAt])
  @@index([contentId, createdAt])
}


enum ReviewStatus {
  /// Newly submitted, awaiting moderation
  PENDING
  /// Approved for public display
  APPROVED
  /// Rejected due to policy violations
  REJECTED
}

model Review {
  id       String       @id @default(ulid())
  /// The numerical rating given by the user (e.g., 1-5)
  rating   Int
  /// The text content of the review
  body     String
  /// Whether the review is featured on the platform
  featured Boolean      @default(false)
  /// The moderation status of the review
  status   ReviewStatus @default(PENDING)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // REVIEW RELATIONS
  // =============================================================================

  /// The author of the review
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  /// The program being reviewed (optional - either program OR course)
  programId String?
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  /// The course being reviewed (optional - either program OR course)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Performance indexes
  @@index([authorId])
  @@index([courseId])
  @@index([programId])
  @@index([createdAt])
  @@index([status])
  @@index([featured])
}


model TimeSpent {
  id         String   @id @default(ulid())
  /// The total duration spent on the lesson in milliseconds
  duration   Int      @default(0)
  /// The timestamp of the user's last activity on the lesson
  lastActive DateTime @default(now())

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // TIME TRACKING RELATIONS
  // =============================================================================

  /// The user whose time is being tracked
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// The lesson being tracked (optional for flexibility)
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String?

  // Performance indexes for analytics queries
  @@index([userId])
  @@index([lessonId])
  @@index([lastActive])
  @@index([userId, lastActive])
  @@index([duration])
}
