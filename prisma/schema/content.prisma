/// Represents a generic piece of content that can be liked or commented on.
/// This is used to abstract content types like articles and tutorials for engagement features.
model Content {
  id       String      @id @default(ulid())
  /// The unique identifier from the headless CMS (e.g., Sanity).
  sanityId String      @unique
  /// The type of content (e.g., ARTICLE, TUTORIAL).
  type     ContentType
  /// The number of views this content has received.
  views    Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  flags     ContentFlag[]

  @@unique([sanityId, type])
}

/// The type of content.
enum ContentType {
  ARTICLE
  TUTORIAL
}

/// The user's progress status on a piece of content.
enum ContentStatus {
  LOCKED
  IN_PROGRESS
  COMPLETED
}

/**
 * Time spent programs will be a summation of time spent on it courses
 */
/// Represents a learning program, which is a collection of courses.
/// User-specific progress is tracked directly on this model.
model Program {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS.
  sanityId String @unique

  /// The user's completion progress percentage for the program.
  progress    Int           @default(0)
  /// The timestamp when the user unlocked the program.
  unlockedAt  DateTime      @default(now())
  /// The timestamp when the user completed the program.
  completedAt DateTime?
  /// The user's current status in the program.
  status      ContentStatus @default(LOCKED)
  courses     Course[]
  reviews     Review[]
  enrollments Enrollment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@index([userId, status])
}

/**
 * Time spent courses will be a summation of time spent on it modules
 */
/// Represents a course, which is a collection of modules.
/// User-specific progress is tracked on this model.
model Course {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS.
  sanityId String @unique

  /// The user's completion progress percentage for the course.
  progress          Int                      @default(0)
  /// The timestamp when the user unlocked the course.
  unlockedAt        DateTime                 @default(now())
  /// The timestamp when the user completed the course.
  completedAt       DateTime?
  /// The user's current status in the course.
  status            ContentStatus            @default(LOCKED)
  modules           Module[]
  reviews           Review[]
  enrollments       Enrollment[]
  teamLearningPaths TeamLearningPathCourse[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  program   Program? @relation(fields: [programId], references: [id])
  programId String?

  @@index([userId])
  @@index([programId])
  @@index([userId, status])
}

/**
 * Time spent modules will be a summation of time spent on it sub-modules
 */
/// Represents a module within a course, which is a collection of sub-modules.
/// User-specific progress is tracked on this model.
model Module {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS.
  sanityId String @unique

  /// The user's completion progress percentage for the module.
  progress    Int           @default(0)
  /// The timestamp when the user unlocked the module.
  unlockedAt  DateTime      @default(now())
  /// The timestamp when the user completed the module.
  completedAt DateTime?
  /// The user's current status in the module.
  status      ContentStatus @default(LOCKED)
  /// The type of module (default is CONTENT; use EXERCISE for exercise modules).
  type        ModuleType    @default(CONTENT)
  subModules  SubModule[]

  /// The test this module belongs to (each module must have one test).
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@index([userId])
  @@index([courseId])
  @@index([userId, status])
}

/// The type of module (e.g., CONTENT, EXERCISE).
enum ModuleType {
  CONTENT
  EXERCISE
}

/**
 * Time spent sub modules will be a summation of time spent on it lessons
 */
/// Represents a sub-module within a module, which is a collection of lessons.
/// User-specific progress is tracked on this model.
model SubModule {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS.
  sanityId String @unique

  /// The user's completion progress percentage for the sub-module.
  progress    Int           @default(0)
  /// The timestamp when the user unlocked the sub-module.
  unlockedAt  DateTime      @default(now())
  /// The timestamp when the user completed the sub-module.
  completedAt DateTime?
  /// The user's current status in the sub-module.
  status      ContentStatus @default(LOCKED)
  lessons     Lesson[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  @@index([userId])
  @@index([moduleId])
  @@index([userId, status])
}

/// Represents a lesson, the smallest unit of educational content.
/// User-specific progress is tracked on this model.
model Lesson {
  id       String @id @default(ulid())
  /// The unique identifier from the headless CMS.
  sanityId String @unique

  /// The timestamp when the user unlocked the lesson.
  unlockedAt  DateTime      @default(now())
  /// The timestamp when the user completed the lesson.
  completedAt DateTime?
  /// The user's current status in the lesson.
  status      ContentStatus @default(LOCKED)
  timeSpent   TimeSpent[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subModule   SubModule @relation(fields: [subModuleId], references: [id], onDelete: Cascade)
  subModuleId String

  @@index([userId])
  @@index([subModuleId])
  @@index([userId, status])
}

/// Represents a test tied to a module.
model Test {
  id        String         @id @default(ulid())
  sanityId  String         @unique
  /// The modules that belong to this test (one test can have many modules).
  modules   Module[]
  questions TestQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Represents a question in a test.
model TestQuestion {
  id       String           @id @default(ulid())
  sanityId String           @unique
  /// The type of question (e.g., MULTIPLE_CHOICE, TRUE_FALSE, SHORT_ANSWER).
  type     TestQuestionType @default(MULTIPLE_CHOICE)
  /// JSON array of options (for multiple choice, etc.)
  options  Json?
  /// JSON array or string for correct answer(s).
  answer   Json

  testId String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// The type of test question.
enum TestQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

/// Represents a "like" action from a user on a piece of content or a comment.
model Like {
  id        String   @id @default(ulid())
  /// The number of likes (typically 1, but allows for future flexibility).
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  @@unique([contentId, userId])
  @@unique([commentId, userId])
}

/// Represents a bookmark action from a user on a piece of content (article or tutorial).
model Bookmark {
  id        String   @id @default(ulid())
  /// Optional notes the user can add to their bookmark.
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  /// Many-to-many relationship with tags
  bookmarkTags BookmarkTag[]

  @@unique([contentId, userId])
  @@index([userId])
  @@index([contentId])
  @@index([createdAt])
}

/// Represents a tag that can be used to organize bookmarks.
model Tag {
  id          String   @id @default(ulid())
  /// The name of the tag (e.g., "react", "tutorial", "frontend").
  name        String
  /// Optional description of what the tag represents.
  description String?
  /// The color of the tag for UI display (hex color code).
  color       String?  @default("#3B82F6")
  /// Whether this tag is created by the system (true) or by users (false).
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /// The user who created this tag (null for system tags).
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Many-to-many relationship with bookmarks
  bookmarkTags BookmarkTag[]

  @@unique([name, userId])
  @@index([userId])
  @@index([name])
  @@index([isSystem])
}

/// Junction table for the many-to-many relationship between bookmarks and tags.
model BookmarkTag {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())

  bookmarkId String
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([bookmarkId, tagId])
  @@index([bookmarkId])
  @@index([tagId])
}

/// Represents a flag/report submitted by a user on content or comments.
model ContentFlag {
  id         String     @id @default(ulid())
  /// The reason for flagging the content.
  reason     FlagReason
  /// Additional details provided by the user.
  details    String?
  /// The current status of the flag.
  status     FlagStatus @default(PENDING)
  /// Admin notes for internal use.
  adminNotes String?
  /// When the flag was resolved.
  resolvedAt DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  /// The user who submitted the flag.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// The admin who resolved the flag (optional).
  resolvedById String?
  resolvedBy   User?   @relation("FlagResolver", fields: [resolvedById], references: [id], onDelete: SetNull)

  /// The content being flagged (articles, tutorials).
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  /// The comment being flagged.
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([commentId])
  @@index([status])
  @@index([createdAt])
}

/// The reason for flagging content.
enum FlagReason {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  COPYRIGHT
  VIOLENCE
  HATE_SPEECH
  ADULT_CONTENT
  SCAM
  OTHER
}

/// The status of a content flag.
enum FlagStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

/// Represents a comment made by a user on a piece of content. Supports nested replies.
model Comment {
  id        String   @id @default(ulid())
  /// The body of the comment.
  body      String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// The ID of the parent comment, for creating threaded replies.
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  contentId String
  content   Content       @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flags     ContentFlag[]

  @@index([authorId])
  @@index([contentId])
  @@index([parentId])
  @@index([createdAt])
}

/// The moderation status of a user-submitted review.
enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

/// Represents a review submitted by a user for a course or program.
model Review {
  id       String       @id @default(ulid())
  /// The numerical rating given by the user (e.g., 1-5).
  rating   Int
  /// The text content of the review.
  body     String
  /// Whether the review is featured on the platform.
  featured Boolean      @default(false)
  /// The moderation status of the review.
  status   ReviewStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  programId String?
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([courseId])
  @@index([programId])
  @@index([createdAt])
}

/// Tracks the amount of time a user has spent on a specific lesson.
model TimeSpent {
  id         String   @id @default(ulid())
  /// The total duration spent on the lesson in milliseconds.
  duration   Int      @default(0)
  /// The timestamp of the user's last activity on the lesson.
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String?

  @@index([userId])
  @@index([lessonId])
  @@index([lastActive])
}
