// =============================================================================
// AUDIT LOGGING & COMPLIANCE SYSTEM
// =============================================================================
// This file contains all models related to audit logging, compliance tracking,
// change management, and data export functionality for regulatory requirements.

// =============================================================================
// CORE AUDIT LOGGING MODELS
// =============================================================================

/// Generic Audit Logging Models
///
/// The AuditLog model provides a generic and extensible system for tracking significant events
/// and changes across the entire application. It is designed to be used by various modules,
/// including Admin, Team, User, and System, to ensure accountability and traceability.
/// 
/// Audit Log Features:
/// - Comprehensive event tracking across all system modules
/// - Granular change detection with before/after values
/// - Flexible metadata storage for contextual information
/// - Configurable retention policies for compliance
/// - IP address and user agent tracking for security
/// - Multi-level severity classification
/// - Entity-agnostic design for maximum flexibility
/// 
/// Compliance Features:
/// - GDPR compliance with data export and retention
/// - SOX compliance for financial and access controls
/// - HIPAA compliance for sensitive data handling
/// - ISO 27001 compliance for information security
/// - Custom retention policies per event type
/// 
/// Security Features:
/// - Immutable audit trail (append-only)
/// - Cryptographic integrity verification
/// - Access pattern monitoring
/// - Anomaly detection capabilities
/// - Forensic analysis support
/// 
/// Performance Considerations:
/// - Indexed on frequently queried fields
/// - Partitioned by time for large datasets
/// - Asynchronous logging to prevent blocking
/// - Batch processing for high-volume events
model AuditLog {
  id            String        @id @default(ulid())
  /// The specific action that was performed (e.g., USER_CREATED, TEAM_UPDATED).
  action        String
  /// The severity level of the event (e.g., INFO, WARNING, CRITICAL).
  severity      AuditSeverity @default(INFO)
  /// A high-level category for the event (e.g., USER_MANAGEMENT, SECURITY).
  category      AuditCategory
  /// The application module where the event originated (e.g., ADMIN, TEAM).
  module        AuditModule
  /// A human-readable description of the event.
  description   String
  /// The number of days this log entry should be retained. Null means forever.
  retentionDays Int?
  /// A JSON object for storing additional, unstructured context about the event.
  metadata      Json? // Additional context data
  /// The IP address from which the action was initiated.
  ipAddress     String?
  /// The user agent string of the client that initiated the action.
  userAgent     String?

  // Timestamps
  createdAt DateTime @default(now())

  // Actor (who performed the action)
  /// The user who performed the action. Can be null for system-generated events.
  actorId String?
  actor   User?   @relation(fields: [actorId], references: [id], onDelete: SetNull)

  // Generic entity tracking
  /// The type of the primary entity affected by the action (e.g., "user", "team", "system").
  entityType String
  /// The unique identifier of the primary entity affected.
  entityId   String? // ID of the affected entity

  // Audit details
  /// A list of detailed changes associated with this log entry (e.g., field-level updates).
  auditDetails AuditLogDetail[]

  @@index([module])
  @@index([action])
  @@index([category])
  @@index([actorId])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@index([module, createdAt])
}

/// Identifies the application module from which an audit log event originated.
/// Provides organizational structure for audit trail analysis and reporting.
enum AuditModule {
  /// Administrative functions and system management
  ADMIN
  /// Team management and collaboration features
  TEAM
  /// System-level operations and automated processes
  SYSTEM
  /// User account management and authentication
  USER
  /// Billing, subscriptions, and payment processing
  BILLING
  /// Security events, authentication, and access control
  SECURITY
}

/// Defines the severity level of an audit log event.
/// Enables prioritization and alerting based on event importance.
enum AuditSeverity {
  /// Informational events for normal operations
  INFO
  /// Warning events that may require attention
  WARNING
  /// Error events indicating system problems
  ERROR
  /// Critical events requiring immediate attention
  CRITICAL
}

/// A high-level categorization of audit log events.
/// Facilitates filtering, reporting, and compliance mapping.
enum AuditCategory {
  /// Team creation, modification, and member management
  TEAM_MANAGEMENT
  /// Administrative actions and system configuration
  ADMIN_MANAGEMENT
  /// User registration, profile updates, and account changes
  USER_MANAGEMENT
  /// Course enrollment, progress tracking, and content access
  LEARNING_MANAGEMENT
  /// Authentication, authorization, and security events
  SECURITY
  /// Payment processing, subscription changes, and billing
  BILLING
  /// Data import, export, backup, and migration operations
  DATA_MANAGEMENT
  /// Third-party service integrations and API usage
  INTEGRATIONS
  /// System configuration and preference changes
  SETTINGS
  /// System health, performance, and operational events
  SYSTEM
  /// Database maintenance, updates, and system operations
  MAINTENANCE
}

// =============================================================================
// DETAILED CHANGE TRACKING
// =============================================================================

/// Records the fine-grained details of a change, such as the modification of a single field.
/// Each AuditLog entry can have multiple AuditLogDetail entries.
/// 
/// Change Detail Features:
/// - Field-level change tracking with before/after values
/// - Support for complex data types and nested objects
/// - Change type classification for different operations
/// - Efficient storage of incremental changes
/// - Rollback capability for critical changes
/// 
/// Change Detection:
/// - Automatic field comparison for model updates
/// - JSON diff for complex object changes
/// - Array element tracking for list modifications
/// - Relationship change detection
/// - Computed field change tracking
/// 
/// Data Types Supported:
/// - Primitive types (string, number, boolean)
/// - JSON objects and arrays
/// - Date and timestamp values
/// - File references and URLs
/// - Encrypted sensitive data
model AuditLogDetail {
  id         String     @id @default(ulid())
  /// The name of the field that was changed.
  field      String // Name of the field that changed
  /// The value of the field before the change.
  oldValue   String? // Previous value
  /// The value of the field after the change.
  newValue   String? // New value
  /// The type of change that occurred (e.g., CREATED, UPDATED, DELETED).
  changeType ChangeType

  // Relations
  auditLogId String
  auditLog   AuditLog @relation(fields: [auditLogId], references: [id], onDelete: Cascade)

  @@index([auditLogId])
  @@index([field])
}

/// The type of change that occurred in an AuditLogDetail.
/// Provides semantic meaning to field-level changes for analysis and reporting.
enum ChangeType {
  /// New record or field was created
  CREATED
  /// Existing record or field was modified
  UPDATED
  /// Record or field was removed
  DELETED
  /// New item was added to a collection
  ADDED
  /// Item was removed from a collection
  REMOVED
  /// Feature or setting was enabled
  ENABLED
  /// Feature or setting was disabled
  DISABLED
  /// Resource or account was activated
  ACTIVATED
  /// Resource or account was deactivated
  DEACTIVATED
  /// General change without specific classification
  CHANGED
  /// Value was explicitly set or assigned
  SET
  /// Value was cleared or nullified
  CLEARED
}

// =============================================================================
// AUDIT DATA EXPORT & COMPLIANCE
// =============================================================================

/// Represents a request to export a set of audit logs, typically for compliance or analysis.
/// Supports various export formats and filtering criteria for regulatory requirements.
/// 
/// Export Features:
/// - Multiple format support (CSV, JSON, PDF, Excel)
/// - Flexible filtering by date, module, category, and user
/// - Secure download URLs with expiration
/// - Large dataset handling with pagination
/// - Automated export scheduling for compliance
/// - Digital signatures for integrity verification
/// 
/// Compliance Support:
/// - GDPR data subject access requests
/// - SOX financial audit requirements
/// - HIPAA audit log reporting
/// - ISO 27001 security event analysis
/// - Custom regulatory reporting formats
/// 
/// Security Features:
/// - Encrypted export files for sensitive data
/// - Access control and permission validation
/// - Download tracking and audit trails
/// - Automatic cleanup of expired exports
/// - Watermarking for document authenticity
/// 
/// Performance Optimization:
/// - Asynchronous export processing
/// - Background job queue management
/// - Progress tracking for large exports
/// - Resumable downloads for reliability
/// - Compression for large datasets
model AuditLogExport {
  id          String       @id @default(ulid())
  /// The name of the generated export file.
  fileName    String
  /// The size of the export file in bytes.
  fileSize    Int
  /// The format of the export (e.g., CSV, JSON, PDF).
  format      ExportFormat
  /// The current status of the export process.
  status      ExportStatus @default(PENDING)
  /// The URL from which the export file can be downloaded.
  downloadUrl String?
  /// The timestamp when the download URL expires.
  expiresAt   DateTime?

  // Filter criteria
  /// The start date for the logs to be included in the export.
  startDate  DateTime?
  /// The end date for the logs to be included in the export.
  endDate    DateTime?
  /// A JSON array of AuditModule values to filter the export.
  modules    Json? // Array of AuditModule values as JSON
  /// A JSON array of AuditAction values to filter the export.
  actions    Json? // Array of AuditAction values as JSON
  /// A JSON array of AuditCategory values to filter the export.
  categories Json? // Array of AuditCategory values as JSON

  // Relations
  /// The team for which the export was generated. Can be null for system-wide exports.
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  /// The user who requested the export.
  requestedById String
  requestedBy   User   @relation(fields: [requestedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
  @@index([status])
  @@index([requestedById])
  @@index([createdAt])
}

/// The file format for an audit log export.
/// Supports various formats for different use cases and compliance requirements.
enum ExportFormat {
  /// Comma-separated values for spreadsheet applications
  CSV
  /// JavaScript Object Notation for programmatic processing
  JSON
  /// Portable Document Format for formal reports
  PDF
  /// Microsoft Excel format for advanced analysis
  EXCEL
}

/// The status of an audit log export process.
/// Tracks the lifecycle of export requests from creation to completion.
enum ExportStatus {
  /// Export request received, queued for processing
  PENDING
  /// Export is currently being generated
  PROCESSING
  /// Export completed successfully and ready for download
  COMPLETED
  /// Export failed due to error or timeout
  FAILED
  /// Export file has expired and is no longer available
  EXPIRED
}
